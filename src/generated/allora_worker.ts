// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: allora_worker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Nonce } from "./emissions/v3/nonce";

export const protobufPackage = "emissions.v9";

export interface InputInference {
  topicId: number;
  blockHeight: number;
  inferer: string;
  value: string;
  extraData: Uint8Array;
  proof: string;
}

export interface InputInferences {
  inferences: InputInference[];
}

export interface InputForecastElement {
  inferer: string;
  value: string;
}

export interface InputForecast {
  topicId: number;
  blockHeight: number;
  forecaster: string;
  forecastElements: InputForecastElement[];
  extraData: Uint8Array;
}

export interface InputForecasts {
  forecasts: InputForecast[];
}

export interface InputInferenceForecastBundle {
  inference: InputInference | undefined;
  forecast: InputForecast | undefined;
}

export interface InputWorkerDataBundle {
  worker: string;
  nonce: Nonce | undefined;
  topicId: number;
  inferenceForecastsBundle: InputInferenceForecastBundle | undefined;
  inferencesForecastsBundleSignature: Uint8Array;
  pubkey: string;
}

export interface InputWorkerDataBundles {
  workerDataBundles: InputWorkerDataBundle[];
}

/** Request/Response messages used by the gateway to submit the worker payload */
export interface InsertWorkerPayloadRequest {
  sender: string;
  workerDataBundle: InputWorkerDataBundle | undefined;
}

export interface InsertWorkerPayloadResponse {
}

function createBaseInputInference(): InputInference {
  return { topicId: 0, blockHeight: 0, inferer: "", value: "", extraData: new Uint8Array(0), proof: "" };
}

export const InputInference: MessageFns<InputInference> = {
  encode(message: InputInference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== 0) {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.inferer !== "") {
      writer.uint32(26).string(message.inferer);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.extraData.length !== 0) {
      writer.uint32(42).bytes(message.extraData);
    }
    if (message.proof !== "") {
      writer.uint32(50).string(message.proof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputInference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputInference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proof = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputInference {
    return {
      topicId: isSet(object.topicId) ? globalThis.Number(object.topicId) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
      proof: isSet(object.proof) ? globalThis.String(object.proof) : "",
    };
  },

  toJSON(message: InputInference): unknown {
    const obj: any = {};
    if (message.topicId !== 0) {
      obj.topicId = Math.round(message.topicId);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    if (message.proof !== "") {
      obj.proof = message.proof;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputInference>, I>>(base?: I): InputInference {
    return InputInference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputInference>, I>>(object: I): InputInference {
    const message = createBaseInputInference();
    message.topicId = object.topicId ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.inferer = object.inferer ?? "";
    message.value = object.value ?? "";
    message.extraData = object.extraData ?? new Uint8Array(0);
    message.proof = object.proof ?? "";
    return message;
  },
};

function createBaseInputInferences(): InputInferences {
  return { inferences: [] };
}

export const InputInferences: MessageFns<InputInferences> = {
  encode(message: InputInferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inferences) {
      InputInference.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputInferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputInferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferences.push(InputInference.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputInferences {
    return {
      inferences: globalThis.Array.isArray(object?.inferences)
        ? object.inferences.map((e: any) => InputInference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InputInferences): unknown {
    const obj: any = {};
    if (message.inferences?.length) {
      obj.inferences = message.inferences.map((e) => InputInference.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputInferences>, I>>(base?: I): InputInferences {
    return InputInferences.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputInferences>, I>>(object: I): InputInferences {
    const message = createBaseInputInferences();
    message.inferences = object.inferences?.map((e) => InputInference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInputForecastElement(): InputForecastElement {
  return { inferer: "", value: "" };
}

export const InputForecastElement: MessageFns<InputForecastElement> = {
  encode(message: InputForecastElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inferer !== "") {
      writer.uint32(10).string(message.inferer);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputForecastElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputForecastElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inferer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputForecastElement {
    return {
      inferer: isSet(object.inferer) ? globalThis.String(object.inferer) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: InputForecastElement): unknown {
    const obj: any = {};
    if (message.inferer !== "") {
      obj.inferer = message.inferer;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputForecastElement>, I>>(base?: I): InputForecastElement {
    return InputForecastElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputForecastElement>, I>>(object: I): InputForecastElement {
    const message = createBaseInputForecastElement();
    message.inferer = object.inferer ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInputForecast(): InputForecast {
  return { topicId: 0, blockHeight: 0, forecaster: "", forecastElements: [], extraData: new Uint8Array(0) };
}

export const InputForecast: MessageFns<InputForecast> = {
  encode(message: InputForecast, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicId !== 0) {
      writer.uint32(8).uint64(message.topicId);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.forecaster !== "") {
      writer.uint32(26).string(message.forecaster);
    }
    for (const v of message.forecastElements) {
      InputForecastElement.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.extraData.length !== 0) {
      writer.uint32(42).bytes(message.extraData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputForecast {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputForecast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.forecaster = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.forecastElements.push(InputForecastElement.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputForecast {
    return {
      topicId: isSet(object.topicId) ? globalThis.Number(object.topicId) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      forecaster: isSet(object.forecaster) ? globalThis.String(object.forecaster) : "",
      forecastElements: globalThis.Array.isArray(object?.forecastElements)
        ? object.forecastElements.map((e: any) => InputForecastElement.fromJSON(e))
        : [],
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
    };
  },

  toJSON(message: InputForecast): unknown {
    const obj: any = {};
    if (message.topicId !== 0) {
      obj.topicId = Math.round(message.topicId);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.forecaster !== "") {
      obj.forecaster = message.forecaster;
    }
    if (message.forecastElements?.length) {
      obj.forecastElements = message.forecastElements.map((e) => InputForecastElement.toJSON(e));
    }
    if (message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputForecast>, I>>(base?: I): InputForecast {
    return InputForecast.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputForecast>, I>>(object: I): InputForecast {
    const message = createBaseInputForecast();
    message.topicId = object.topicId ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.forecaster = object.forecaster ?? "";
    message.forecastElements = object.forecastElements?.map((e) => InputForecastElement.fromPartial(e)) || [];
    message.extraData = object.extraData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseInputForecasts(): InputForecasts {
  return { forecasts: [] };
}

export const InputForecasts: MessageFns<InputForecasts> = {
  encode(message: InputForecasts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.forecasts) {
      InputForecast.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputForecasts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputForecasts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forecasts.push(InputForecast.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputForecasts {
    return {
      forecasts: globalThis.Array.isArray(object?.forecasts)
        ? object.forecasts.map((e: any) => InputForecast.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InputForecasts): unknown {
    const obj: any = {};
    if (message.forecasts?.length) {
      obj.forecasts = message.forecasts.map((e) => InputForecast.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputForecasts>, I>>(base?: I): InputForecasts {
    return InputForecasts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputForecasts>, I>>(object: I): InputForecasts {
    const message = createBaseInputForecasts();
    message.forecasts = object.forecasts?.map((e) => InputForecast.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInputInferenceForecastBundle(): InputInferenceForecastBundle {
  return { inference: undefined, forecast: undefined };
}

export const InputInferenceForecastBundle: MessageFns<InputInferenceForecastBundle> = {
  encode(message: InputInferenceForecastBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inference !== undefined) {
      InputInference.encode(message.inference, writer.uint32(10).fork()).join();
    }
    if (message.forecast !== undefined) {
      InputForecast.encode(message.forecast, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputInferenceForecastBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputInferenceForecastBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inference = InputInference.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.forecast = InputForecast.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputInferenceForecastBundle {
    return {
      inference: isSet(object.inference) ? InputInference.fromJSON(object.inference) : undefined,
      forecast: isSet(object.forecast) ? InputForecast.fromJSON(object.forecast) : undefined,
    };
  },

  toJSON(message: InputInferenceForecastBundle): unknown {
    const obj: any = {};
    if (message.inference !== undefined) {
      obj.inference = InputInference.toJSON(message.inference);
    }
    if (message.forecast !== undefined) {
      obj.forecast = InputForecast.toJSON(message.forecast);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputInferenceForecastBundle>, I>>(base?: I): InputInferenceForecastBundle {
    return InputInferenceForecastBundle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputInferenceForecastBundle>, I>>(object: I): InputInferenceForecastBundle {
    const message = createBaseInputInferenceForecastBundle();
    message.inference = (object.inference !== undefined && object.inference !== null)
      ? InputInference.fromPartial(object.inference)
      : undefined;
    message.forecast = (object.forecast !== undefined && object.forecast !== null)
      ? InputForecast.fromPartial(object.forecast)
      : undefined;
    return message;
  },
};

function createBaseInputWorkerDataBundle(): InputWorkerDataBundle {
  return {
    worker: "",
    nonce: undefined,
    topicId: 0,
    inferenceForecastsBundle: undefined,
    inferencesForecastsBundleSignature: new Uint8Array(0),
    pubkey: "",
  };
}

export const InputWorkerDataBundle: MessageFns<InputWorkerDataBundle> = {
  encode(message: InputWorkerDataBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    if (message.nonce !== undefined) {
      Nonce.encode(message.nonce, writer.uint32(18).fork()).join();
    }
    if (message.topicId !== 0) {
      writer.uint32(24).uint64(message.topicId);
    }
    if (message.inferenceForecastsBundle !== undefined) {
      InputInferenceForecastBundle.encode(message.inferenceForecastsBundle, writer.uint32(34).fork()).join();
    }
    if (message.inferencesForecastsBundleSignature.length !== 0) {
      writer.uint32(42).bytes(message.inferencesForecastsBundleSignature);
    }
    if (message.pubkey !== "") {
      writer.uint32(50).string(message.pubkey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputWorkerDataBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputWorkerDataBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nonce = Nonce.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.topicId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inferenceForecastsBundle = InputInferenceForecastBundle.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inferencesForecastsBundleSignature = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputWorkerDataBundle {
    return {
      worker: isSet(object.worker) ? globalThis.String(object.worker) : "",
      nonce: isSet(object.nonce) ? Nonce.fromJSON(object.nonce) : undefined,
      topicId: isSet(object.topicId) ? globalThis.Number(object.topicId) : 0,
      inferenceForecastsBundle: isSet(object.inferenceForecastsBundle)
        ? InputInferenceForecastBundle.fromJSON(object.inferenceForecastsBundle)
        : undefined,
      inferencesForecastsBundleSignature: isSet(object.inferencesForecastsBundleSignature)
        ? bytesFromBase64(object.inferencesForecastsBundleSignature)
        : new Uint8Array(0),
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
    };
  },

  toJSON(message: InputWorkerDataBundle): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    if (message.nonce !== undefined) {
      obj.nonce = Nonce.toJSON(message.nonce);
    }
    if (message.topicId !== 0) {
      obj.topicId = Math.round(message.topicId);
    }
    if (message.inferenceForecastsBundle !== undefined) {
      obj.inferenceForecastsBundle = InputInferenceForecastBundle.toJSON(message.inferenceForecastsBundle);
    }
    if (message.inferencesForecastsBundleSignature.length !== 0) {
      obj.inferencesForecastsBundleSignature = base64FromBytes(message.inferencesForecastsBundleSignature);
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputWorkerDataBundle>, I>>(base?: I): InputWorkerDataBundle {
    return InputWorkerDataBundle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputWorkerDataBundle>, I>>(object: I): InputWorkerDataBundle {
    const message = createBaseInputWorkerDataBundle();
    message.worker = object.worker ?? "";
    message.nonce = (object.nonce !== undefined && object.nonce !== null) ? Nonce.fromPartial(object.nonce) : undefined;
    message.topicId = object.topicId ?? 0;
    message.inferenceForecastsBundle =
      (object.inferenceForecastsBundle !== undefined && object.inferenceForecastsBundle !== null)
        ? InputInferenceForecastBundle.fromPartial(object.inferenceForecastsBundle)
        : undefined;
    message.inferencesForecastsBundleSignature = object.inferencesForecastsBundleSignature ?? new Uint8Array(0);
    message.pubkey = object.pubkey ?? "";
    return message;
  },
};

function createBaseInputWorkerDataBundles(): InputWorkerDataBundles {
  return { workerDataBundles: [] };
}

export const InputWorkerDataBundles: MessageFns<InputWorkerDataBundles> = {
  encode(message: InputWorkerDataBundles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workerDataBundles) {
      InputWorkerDataBundle.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputWorkerDataBundles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputWorkerDataBundles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workerDataBundles.push(InputWorkerDataBundle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputWorkerDataBundles {
    return {
      workerDataBundles: globalThis.Array.isArray(object?.workerDataBundles)
        ? object.workerDataBundles.map((e: any) => InputWorkerDataBundle.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InputWorkerDataBundles): unknown {
    const obj: any = {};
    if (message.workerDataBundles?.length) {
      obj.workerDataBundles = message.workerDataBundles.map((e) => InputWorkerDataBundle.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputWorkerDataBundles>, I>>(base?: I): InputWorkerDataBundles {
    return InputWorkerDataBundles.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputWorkerDataBundles>, I>>(object: I): InputWorkerDataBundles {
    const message = createBaseInputWorkerDataBundles();
    message.workerDataBundles = object.workerDataBundles?.map((e) => InputWorkerDataBundle.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInsertWorkerPayloadRequest(): InsertWorkerPayloadRequest {
  return { sender: "", workerDataBundle: undefined };
}

export const InsertWorkerPayloadRequest: MessageFns<InsertWorkerPayloadRequest> = {
  encode(message: InsertWorkerPayloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.workerDataBundle !== undefined) {
      InputWorkerDataBundle.encode(message.workerDataBundle, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertWorkerPayloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertWorkerPayloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workerDataBundle = InputWorkerDataBundle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertWorkerPayloadRequest {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      workerDataBundle: isSet(object.workerDataBundle)
        ? InputWorkerDataBundle.fromJSON(object.workerDataBundle)
        : undefined,
    };
  },

  toJSON(message: InsertWorkerPayloadRequest): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.workerDataBundle !== undefined) {
      obj.workerDataBundle = InputWorkerDataBundle.toJSON(message.workerDataBundle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InsertWorkerPayloadRequest>, I>>(base?: I): InsertWorkerPayloadRequest {
    return InsertWorkerPayloadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InsertWorkerPayloadRequest>, I>>(object: I): InsertWorkerPayloadRequest {
    const message = createBaseInsertWorkerPayloadRequest();
    message.sender = object.sender ?? "";
    message.workerDataBundle = (object.workerDataBundle !== undefined && object.workerDataBundle !== null)
      ? InputWorkerDataBundle.fromPartial(object.workerDataBundle)
      : undefined;
    return message;
  },
};

function createBaseInsertWorkerPayloadResponse(): InsertWorkerPayloadResponse {
  return {};
}

export const InsertWorkerPayloadResponse: MessageFns<InsertWorkerPayloadResponse> = {
  encode(_: InsertWorkerPayloadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertWorkerPayloadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertWorkerPayloadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InsertWorkerPayloadResponse {
    return {};
  },

  toJSON(_: InsertWorkerPayloadResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<InsertWorkerPayloadResponse>, I>>(base?: I): InsertWorkerPayloadResponse {
    return InsertWorkerPayloadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InsertWorkerPayloadResponse>, I>>(_: I): InsertWorkerPayloadResponse {
    const message = createBaseInsertWorkerPayloadResponse();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
