# =============================================================================
# MODEL GATEWAY - ENVIRONMENT VARIABLES CONFIGURATION
# =============================================================================
# This file contains all environment variables used by the Model Gateway application.
# Copy this file to .env.local and fill in your specific values.
# 
# The Model Gateway is a production-grade HTTP server that simplifies participation
# of Data Scientists (Workers) on the Allora Network by abstracting blockchain
# complexities and handling wallet management, automated fee payment, and monitoring.
# =============================================================================

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# The environment in which the application is running.
# - 'development': Development mode with debug logging and in-memory secrets
# - 'production': Production mode with Vault integration and strict security
# - 'test': Testing mode for automated tests
NODE_ENV=development

# The port on which the API server will run.
# Default: 3000
PORT=3000

# The verbosity of the application logger.
# Recommended values: 'debug' for development, 'info' for production
# Possible values: 'trace', 'debug', 'info', 'warn', 'error', 'fatal'
# Default: 'info'
LOG_LEVEL=info

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# The connection URL for the PostgreSQL database.
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
# Required for: User management, model registration, wallet tracking, job history
DATABASE_URL="postgresql://username:password@localhost:5432/model_gateway"

# CA certificate for SSL validation (optional).
# Used for secure database connections in production environments.
# Leave empty for development or when using self-signed certificates.
DB_CA_CERT=""

# =============================================================================
# JOB QUEUE CONFIGURATION (REDIS)
# =============================================================================

# The connection URL for the Redis server, used by BullMQ for job processing.
# Format: redis://[user]:[password]@[host]:[port]
# Required for: Job queuing, worker coordination, rate limiting, caching
REDIS_URL="redis://localhost:6379"

# =============================================================================
# ALLORA NETWORK CONFIGURATION
# =============================================================================

# Comma-separated list of RPC endpoints for Allora blockchain nodes.
# Used for blockchain interactions, transaction submission, and network queries.
# Multiple URLs provide failover capability.
ALLORA_RPC_URLS="https://rpc.testnet.allora.network/"

# Comma-separated list of API endpoints for Allora network services.
# Used for fetching network data, topic information, and market data.
# Multiple URLs provide failover capability.
ALLORA_API_URLS="https://allora-api.testnet.allora.network"

# The chain ID for the target Allora network.
# Default: 'allora-testnet-1' (testnet)
# Change to 'allora-mainnet-1' for production
CHAIN_ID="allora-testnet-1"

# The assumed average time (in seconds) for one block to be produced on the Allora chain.
# Used by the scheduler to convert epoch_length (in blocks) to time intervals.
# Default: 5 seconds
AVERAGE_BLOCK_TIME_SECONDS=5

# =============================================================================
# SECRETS MANAGEMENT CONFIGURATION
# =============================================================================

# Key used to identify the treasury wallet's mnemonic in the secrets manager.
# In production using HashiCorp Vault, this is the key of the secret.
# Required for: Funding new user wallets, paying transaction fees
TREASURY_MNEMONIC_SECRET_KEY="treasury_mnemonic"

# =============================================================================
# HASHICORP VAULT CONFIGURATION (REQUIRED FOR PRODUCTION)
# =============================================================================

# The address of the HashiCorp Vault instance.
# Used for secure storage of sensitive data like wallet mnemonics.
# Format: http://host:port or https://host:port
VAULT_ADDR="http://127.0.0.1:8200"

# A valid Vault token with policies to read/write wallet secrets.
# This token must have access to the secrets path configured below.
VAULT_TOKEN="your_vault_token_here"

# The namespace in Vault (optional).
# Used for multi-tenant Vault deployments.
VAULT_NAMESPACE=""

# The path in Vault where secrets are stored.
# Default: 'secret/data/mcp'
VAULT_SECRET_PATH="secret/data/mcp"

# =============================================================================
# CLERK AUTHENTICATION CONFIGURATION
# =============================================================================

# Frontend publishable key for Clerk authentication.
# Used by the React frontend for user authentication and session management.
# Required for: User login, registration, session management
VITE_CLERK_PUBLISHABLE_KEY="pk_test_your_clerk_publishable_key"

# Backend secret key for Clerk authentication.
# Used by the API server to verify user tokens and manage authentication.
# Required for: API authentication, user verification
CLERK_SECRET_KEY="sk_test_your_clerk_secret_key"

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Comma-separated list of allowed origins for CORS.
# Used to restrict which domains can access the API.
# Format: "http://localhost:3000,https://yourdomain.com"
ALLOWED_ORIGINS="http://localhost:3000"

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================

# Time window for rate limiting in milliseconds.
# Default: 900000 (15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Maximum number of requests allowed per time window.
# Default: 100 requests per window
RATE_LIMIT_MAX=100

# =============================================================================
# WORKER PAYLOAD FORMATTING BEHAVIOR
# =============================================================================

# Precision for bounded exponential decimal calculations.
# Used when processing ML model outputs and converting to blockchain format.
# Default: 18
BOUNDED_EXP40DEC_PRECISION=18

# Policy for handling invalid model outputs.
# - 'throw': Stop processing and throw an error
# - 'skip': Skip the submission and continue
# - 'zero': Use zero as the output value
# Default: 'throw'
INVALID_MODEL_OUTPUT_POLICY=throw

# =============================================================================
# TESTING/DEVELOPMENT TOGGLES
# =============================================================================

# Enable dry-run mode for transactions (development only).
# When true, transactions are simulated but not broadcast to the blockchain.
# Default: false
DRY_RUN_TRANSACTIONS=false

# =============================================================================
# ACTIVE TOPICS DISCOVERY CONFIGURATION
# =============================================================================

# Starting ID for scanning active topics.
# Used when the API fails to provide topic information.
# Default: 1
ACTIVE_TOPICS_SCAN_START_ID=1

# Ending ID for scanning active topics.
# Used when the API fails to provide topic information.
# Default: 100
ACTIVE_TOPICS_SCAN_END_ID=70

# Cache duration for active topics in milliseconds.
# Default: 60000 (1 minute)
ACTIVE_TOPICS_CACHE_MS=60000

# Enable fallback scanning for active topics.
# When true, manually scan for topics if API fails.
# Default: true
ACTIVE_TOPICS_FALLBACK_SCAN=true

# =============================================================================
# FAST BROADCAST CONFIGURATION
# =============================================================================

# Fixed gas limit for transaction submissions.
# Used to ensure consistent gas costs across all transactions.
# Default: 180000
SUBMISSION_FIXED_GAS_LIMIT=180000

# Enable fast broadcast mode for jobs.
# When true, bypasses some validation checks for faster processing.
# Default: false
JOBS_FAST_BROADCAST=true

# =============================================================================
# SUBMISSION GATING CONFIGURATION
# =============================================================================

# Bypass the 'can_submit' check for jobs.
# When true, allows submissions even if the model shouldn't submit.
# Use with caution in production.
# Default: false
JOBS_BYPASS_CAN_SUBMIT=false

# =============================================================================
# NODE HEALTH MONITORING
# =============================================================================

# Enable node health monitoring.
# Monitors blockchain node health and switches to healthy nodes.
# Default: true
ENABLE_NODE_HEALTH_MONITOR=true

# Health check interval in milliseconds.
# How often to check node health.
# Default: 30000 (30 seconds)
NODE_HEALTH_CHECK_MS=30000

# Maximum number of consecutive health check failures.
# After this many failures, a node is marked as unhealthy.
# Default: 2
NODE_HEALTH_MAX_FAILS=2

# =============================================================================
# JOB QUEUE CONTROLS
# =============================================================================

# Maximum number of inference jobs processed in parallel by the worker.
# Controls worker concurrency and resource usage.
# Default: 5
JOB_CONCURRENCY=5

# Maximum number of jobs the worker can start in a sliding time window.
# Rate limiting for job processing to prevent overwhelming the system.
# Default: 100
JOB_RATE_MAX=100

# Duration of the job rate limiting window in milliseconds.
# Default: 10000 (10 seconds)
JOB_RATE_DURATION=10000

# =============================================================================
# REGISTRATION FUNDING POLICY
# =============================================================================

# Safety multiplier applied to simulated registration fee when funding new wallets.
# Ensures sufficient funds are available for registration.
# Default: 1.3 (30% buffer)
REG_FEE_SAFETY_MULTIPLIER=1.3

# =============================================================================
# PREFLIGHT BALANCE AND AUTO-TOP-UP
# =============================================================================

# Enable balance checks before job submission.
# Prevents out-of-gas errors by checking wallet balance first.
# Default: true
ENABLE_PREFLIGHT_BALANCE_CHECK=true

# Minimum wallet balance in uALLO (micro ALLO).
# Wallets below this threshold will be topped up.
# Default: 20000 (0.02 ALLO)
MIN_WALLET_BALANCE_UALLO=20000

# Amount to top up wallets in uALLO (micro ALLO).
# Amount added when wallet balance is below minimum.
# Default: 50000 (0.05 ALLO)
TOPUP_AMOUNT_UALLO=50000

# =============================================================================
# METRICS PROTECTION
# =============================================================================

# Token for accessing Prometheus metrics endpoint.
# Used to protect metrics from unauthorized access.
# Leave empty to disable metrics protection.
METRICS_TOKEN=""

# =============================================================================
# TESTING AND DEVELOPMENT SCRIPTS
# =============================================================================

# Mnemonic phrase for testing scripts.
# Used by development scripts like simulate-worker-payload.ts.
# DO NOT use production mnemonics here.
WORKER_MNEMONIC=""

# Model ID override for testing scripts.
# Used when worker mnemonic is not set in testing scripts.
# Default: empty (uses registered model)
MODEL_ID=""

# =============================================================================
# RAILWAY DEPLOYMENT (OPTIONAL)
# =============================================================================

# Public domain for Railway deployment.
# Used when deploying to Railway platform.
# Format: "your-app.railway.app"
RAILWAY_PUBLIC_DOMAIN=""

# =============================================================================
# NOTES FOR DEVELOPERS
# =============================================================================
#
# 1. SECURITY: Never commit .env.local files to version control
# 2. PRODUCTION: Always use HashiCorp Vault for secrets management
# 3. TESTING: Use separate environment files for different test scenarios
# 4. VALIDATION: All variables are validated at startup using Zod schemas
# 5. DEFAULTS: Most variables have sensible defaults for development
#
# For more information, see the README.md and src/config/index.ts files.
# =============================================================================
