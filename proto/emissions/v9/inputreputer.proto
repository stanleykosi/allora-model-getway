syntax = "proto3";
package emissions.v9;

import "emissions/v3/nonce.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

message InputWorkerAttributedValue {
  option (gogoproto.equal) = true;

  string worker = 1; // worker who created the value
  string value = 2 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.BoundedExp40Dec",
    (gogoproto.nullable) = false
  ];
}

message InputWithheldWorkerAttributedValue {
  option (gogoproto.equal) = true;

  string worker = 1;
  string value = 2 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.BoundedExp40Dec",
    (gogoproto.nullable) = false
  ];
}

message InputOneOutInfererForecasterValues {
  option (gogoproto.equal) = true;
  string forecaster = 3;
  repeated InputWithheldWorkerAttributedValue one_out_inferer_values = 4;
}

// These losses and inferences are calculated per reputer or by the network
// The `m`s in the comments below exist for when they're made by reputers,
// but they may be absent implying that they were made by the network
message InputValueBundle {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  emissions.v3.ReputerRequestNonce reputer_request_nonce = 2;
  string reputer = 3;
  bytes extra_data = 4;
  // R_im || log10 L_im || I_i
  string combined_value = 5 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.BoundedExp40Dec",
    (gogoproto.nullable) = false
  ];
  // R_ijm || log10 L_ijm || I_ij
  repeated InputWorkerAttributedValue inferer_values = 6;
  // R_ikm || log10 L_ikm || I_ik
  repeated InputWorkerAttributedValue forecaster_values = 7;
  // R^-_im  || log10 L^-_im || I^-_i
  string naive_value = 8 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.BoundedExp40Dec",
    (gogoproto.nullable) = false
  ];
  // Note: forecast-implied inferences are recomputed for each left-out
  // inference
  repeated InputWithheldWorkerAttributedValue one_out_inferer_values = 9;
  // R^-_ilm || log10 L^-_ilm || I^-_il where l = any k
  repeated InputWithheldWorkerAttributedValue one_out_forecaster_values = 10;
  // R^+_ikm || log10 L^+_ikm || I^+_ik
  // aka one_in_forecaster_values because equivalent to using only one
  // forecast-implied inference
  repeated InputWorkerAttributedValue one_in_forecaster_values = 11;
  // R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
  // log10 L^-_j'ikm || I^-_j'ik
  repeated InputOneOutInfererForecasterValues one_out_inferer_forecaster_values = 12;
}

// For when the bundle is computed on a per-reputer basis (ie.. if there is an
// index `m` in the above)
message InputReputerValueBundle {
  option (gogoproto.equal) = true;

  InputValueBundle value_bundle = 1;
  bytes signature = 2;
  string pubkey = 3;
}

message InputReputerValueBundles {
  repeated InputReputerValueBundle reputer_value_bundles = 1;
}
